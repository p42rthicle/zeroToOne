/**
You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
- Don't use any database, just store all the data in an array to store the todo list data (in-memory)
- Hard todo: Try to save responses in files, so that even if you exit the app and run it again, the data remains (similar to databases)

Each todo has a title and a description. The title is a string and the description is a string.
Each todo should also get an unique autogenerated id every time it is created
The expected API endpoints are defined below,
1.GET /todos - Retrieve all todo items
Description: Returns a list of all todo items.
Response: 200 OK with an array of todo items in JSON format.
Example: GET http://localhost:3000/todos

2.GET /todos/:id - Retrieve a specific todo item by ID
Description: Returns a specific todo item identified by its ID.
Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
Example: GET http://localhost:3000/todos/123

3. POST /todos - Create a new todo item
Description: Creates a new todo item.
Request Body: JSON object representing the todo item.
Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
Example: POST http://localhost:3000/todos
Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

4. PUT /todos/:id - Update an existing todo item by ID
Description: Updates an existing todo item identified by its ID.
Request Body: JSON object representing the updated todo item.
Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
Example: PUT http://localhost:3000/todos/123
Request Body: { "title": "Buy groceries", "completed": true }

5. DELETE /todos/:id - Delete a todo item by ID
Description: Deletes a todo item identified by its ID.
Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
Example: DELETE http://localhost:3000/todos/123

- For any other route not defined in the server return 404

Testing the server - run `npm run test-todoServer` command in terminal
*/

const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs').promises;

const app = express();
const port = 3000;

// Body parser middleware
app.use(bodyParser.json());

let todos = [];

function generateId() {
  return Math.random().toString(36).substring(2, 14);
}

async function loadTodos() {
  try {
    await fs.access('todos.json');
    const data  = await fs.readFile('todos.json', 'utf-8');

    if (!data.trim()) {
      todos = [];
      await saveTodos();
      return;
    }

    todos = JSON.parse(data);
  } catch (error) {
    if (error.code === 'ENOENT') {
      todos = [];
      await saveTodos(); // Creates file if doesn't exist
    }
    else {
      console.error("Error reading todos:", error);
      todos = [];
    }
  }
}

async function saveTodos() {
  try {
    await fs.writeFile('todos.json', JSON.stringify(todos, null, 4));
  } catch(error) {
    console.error("Error saving todos:", error);
  }
}

async function addTodo(title, description) {
  const newTodo = {
    id: generateId(),
    title: title,
    description: description,
    completed: false
  };
  todos.push(newTodo);
  await saveTodos();
  return newTodo.id;
}

// Load todos immediately when module laods
loadTodos().catch(err => console.error("Failed to load todos", err));

// POST /todos - New item
app.post('/todos', async (req, res) => {
  const { title, description } = req.body;
  if (!title || !description) {
    return res.status(400).send('Title and description are required');
  }

  const id = await addTodo(title, description);
  res.status(201).send({ id });
});

// GET /todos
app.get('/todos', (req, res) => {
  res.status(200).json(todos);
});

// GET /todo/:id
app.get('/todos/:id', (req, res) => {
  const todo = todos.find(t => t.id === req.params.id);
  if (!todo) {
    return res.status(404).send('Invalid id');
  }
  res.status(200).json(todo);
});

// PUT /todods/:id
app.put('/todos/:id', async (req, res) => {
  const todoIndex = todos.findIndex(t => t.id === req.params.id);
  if (todoIndex === -1) {
    return res.status(404).send('Invalid id');
  }

  const updatedTodo = Object.assign({}, todos[todoIndex], req.body);
  todos[todoIndex] = updatedTodo;

  await saveTodos();
  res.status(200).json(updatedTodo);
  }
);

// Delete /todos/id
app.delete('/todos/:id', async (req, res) => {
  const todoIndex = todos.findIndex(t => t.id === req.params.id);
  if (todoIndex === -1) {
    return res.status(404).send('Invalid id');
  }

  todos.splice(todoIndex, 1);
  await saveTodos();
  res.status(200).send();
});

// Root
app.get('/', (req, res) => {
  res.send('todos application');
});

// 404 handler
app.use((req, res) => {
  res.status(404).send("Route not found");
});

module.exports = app;